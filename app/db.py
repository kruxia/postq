from sqlalchemy import Column, DateTime, MetaData, SmallInteger, String, Table, text
from sqlalchemy.dialects.postgresql import JSONB, UUID

metadata = MetaData(schema='postq')

Jobs = Table(
    'jobs',
    metadata,
    Column(
        'id',
        UUID,
        primary_key=True,
        server_default=text("gen_random_uuid()"),
        comment='autogenerated (UUID) primary key',
    ),
    Column(
        'qname',
        String,
        nullable=True,
        comment='name of the queue, if any, to which this job is assigned',
    ),
    Column(
        'retries',
        SmallInteger,
        server_default=text("1"),
        comment='number of retries remaining to do for this job',
    ),
    Column(
        'queued',
        DateTime(timezone=True),
        nullable=False,
        server_default=text('current_timestamp'),
        comment='timestamp when the job was queued',
    ),
    Column(
        'scheduled',
        DateTime(timezone=True),
        nullable=False,
        server_default=text('current_timestamp'),
        comment='timestamp when the job is scheduled',
    ),
    Column(
        'tasks',
        JSONB,
        server_default=text("'{}'::jsonb"),
        comment='definition (DAG) of the tasks to be done',
    ),
    Column(
        'data',
        JSONB,
        server_default=text("'{}'::jsonb"),
        comment='data for the tasks to consume / produce',
    ),
)

# JobsLog = log of jobs that have been completed
JobsLog = Table(
    'jobs_log',
    metadata,
    Column('id', UUID, comment='(UUID) primary key from the jobs table',),
    Column(
        'qname',
        String,
        nullable=True,
        comment='name of the queue, if any, to which this job was assigned',
    ),
    Column(
        'retries',
        SmallInteger,
        comment='number of retries remaining to do for this job',
    ),
    Column(
        'queued',
        DateTime(timezone=True),
        nullable=False,
        comment='timestamp when the job was queued',
    ),
    Column(
        'scheduled',
        DateTime(timezone=True),
        nullable=False,
        comment='timestamp when the job was scheduled',
    ),
    Column(
        'completed',
        DateTime(timezone=True),
        nullable=False,
        server_default=text('current_timestamp'),
        comment='timestamp when the job was completed',
    ),
    Column(
        'tasks',
        JSONB,
        server_default=text("'{}'::jsonb"),
        comment='definition (DAG) of the tasks to be done',
    ),
    Column(
        'data',
        JSONB,
        server_default=text("'{}'::jsonb"),
        comment='data for the tasks to consume / produce',
    ),
    Column(
        'errors',
        JSONB,
        server_default=text("'{}'::jsonb"),
        comment='task errors that occurred while running the job',
    ),
)
